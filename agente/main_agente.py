"""
=========================================================
Agente Netunna Splitter - v4.1
---------------------------------------------------------
Fluxo Autom√°tico:
  1Ô∏è‚É£ Upload ‚Üí 2Ô∏è‚É£ Processamento remoto ‚Üí 3Ô∏è‚É£ Download
---------------------------------------------------------
Compat√≠vel com painel principal do Splitter (Azure)
Autor: Nous / Netunna Software ¬© 2025
=========================================================
"""

import os
import time
from dotenv import load_dotenv
from agente.uploader import upload_file
from agente.downloader import baixar_output
from agente.utils import log, tempo, extrair_nsa

# =========================================================
# üîß Inicializa√ß√£o e Configura√ß√£o
# =========================================================
load_dotenv()

# Diret√≥rio base (padr√£o para Azure)
BASE_DIR = os.getenv("BASE_DIR", "/home/site/wwwroot")

# Diret√≥rios operacionais ‚Äî sincronizados com o painel principal
LOCAL_INPUT  = os.getenv("AGENTE_INPUT_DIR", os.path.join(BASE_DIR, "input"))
LOCAL_OUTPUT = os.getenv("AGENTE_OUTPUT_DIR", os.path.join(BASE_DIR, "output"))
LOCAL_ERROR  = os.getenv("AGENTE_ERROR_DIR", os.path.join(BASE_DIR, "erro"))
LOCAL_LOGS   = os.getenv("AGENTE_LOG_DIR", os.path.join(BASE_DIR, "logs"))
LOCAL_SENT   = os.path.join(BASE_DIR, "enviados")

# =========================================================
# üß© Cria√ß√£o autom√°tica de diret√≥rios
# =========================================================
def ensure_dirs():
    """Garante a exist√™ncia das pastas essenciais do agente."""
    dirs = [LOCAL_INPUT, LOCAL_OUTPUT, LOCAL_ERROR, LOCAL_LOGS, LOCAL_SENT]
    for d in dirs:
        try:
            os.makedirs(d, exist_ok=True)
        except Exception as e:
            print(f"‚ö†Ô∏è Falha ao criar diret√≥rio {d}: {e}")
    log("üìÅ Estrutura de diret√≥rios verificada/ajustada.")

# =========================================================
# üöÄ Execu√ß√£o Principal
# =========================================================
def main():
    ensure_dirs()
    log("üöÄ Iniciando Netunna Splitter Agent v4.1")

    # Lista arquivos dispon√≠veis no diret√≥rio de input
    try:
        arquivos = [f for f in os.listdir(LOCAL_INPUT)
                    if os.path.isfile(os.path.join(LOCAL_INPUT, f))]
    except Exception as e:
        log(f"‚ùå Erro ao listar arquivos em {LOCAL_INPUT}: {e}")
        return

    if not arquivos:
        log("üìÇ Nenhum arquivo encontrado no diret√≥rio INPUT.")
        return

    ultimo_nsa = "000"

    # =========================================================
    # 1Ô∏è‚É£ Upload de arquivos
    # =========================================================
    for nome in arquivos:
        caminho = os.path.join(LOCAL_INPUT, nome)
        nsa = extrair_nsa(nome)
        ultimo_nsa = nsa or ultimo_nsa
        try:
            log(f"üì§ Enviando arquivo {nome}...")
            upload_file(caminho)
        except Exception as e:
            log(f"‚ùå Falha ao enviar {nome}: {e}")

    # =========================================================
    # 2Ô∏è‚É£ Aguardar processamento remoto
    # =========================================================
    log("‚è≥ Aguardando processamento remoto (30s)...")
    time.sleep(30)

    # =========================================================
    # 3Ô∏è‚É£ Baixar arquivos processados
    # =========================================================
    try:
        log("‚¨áÔ∏è Iniciando download do output remoto...")
        baixar_output(nsa_hint=ultimo_nsa)
        log("‚úÖ Download conclu√≠do com sucesso.")
    except Exception as e:
        log(f"‚ö†Ô∏è Erro ao baixar arquivos: {e}")

    log("üèÅ Ciclo de execu√ß√£o finalizado com sucesso.")
    log(f"üïí Dura√ß√£o total: {tempo()}")

# =========================================================
# üîò Execu√ß√£o Direta
# =========================================================
if __name__ == "__main__":
    main()
